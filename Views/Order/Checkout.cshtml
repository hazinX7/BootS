@model IEnumerable<hazinDNS_v2.Models.CartItem>

@{
    ViewData["Title"] = "Оформление заказа";
    var totalAmount = ViewBag.TotalAmount;
    var userBalance = ViewBag.UserBalance;
}

<div class="container mt-4">
    <h2>Оформление заказа</h2>

    <div class="row mt-4">
        <div class="col-md-8">
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title">Товары в заказе</h5>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Товар</th>
                                    <th>Цена</th>
                                    <th>Количество</th>
                                    <th>Сумма</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in Model)
                                {
                                    <tr>
                                        <td>@item.Product.Name</td>
                                        <td>@item.Product.Price.ToString("C")</td>
                                        <td>@item.Quantity</td>
                                        <td>@((item.Product.Price * item.Quantity).ToString("C"))</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Адрес доставки</h5>
                    <div class="mb-3">
                        <textarea id="deliveryAddress" class="form-control" rows="3" 
                                placeholder="Введите адрес доставки"></textarea>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Информация о заказе</h5>
                    <div class="mb-3">
                        <label class="form-label">Сумма заказа</label>
                        <p class="form-control-static">@totalAmount.ToString("C")</p>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Ваш баланс</label>
                        <p class="form-control-static">@userBalance.ToString("C")</p>
                    </div>
                    @if (userBalance < totalAmount)
                    {
                        <div class="alert alert-warning">
                            Недостаточно средств на балансе. 
                            <a href="/Balance" class="alert-link">Пополнить баланс</a>
                        </div>
                    }
                    <button class="btn btn-primary w-100" onclick="placeOrder()"
                            @(userBalance < totalAmount ? "disabled" : "")>
                        Оформить заказ
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function placeOrder() {
            const deliveryAddress = document.getElementById('deliveryAddress').value;
            
            if (!deliveryAddress) {
                Swal.fire({
                    title: 'Ошибка',
                    text: 'Пожалуйста, укажите адрес доставки',
                    icon: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#dc3545'
                });
                return;
            }

            fetch('/Order/PlaceOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ deliveryAddress: deliveryAddress })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        title: 'Заказ оформлен!',
                        text: 'Ваш заказ успешно оформлен и принят в обработку',
                        icon: 'success',
                        confirmButtonText: 'Перейти к заказам',
                        confirmButtonColor: '#28a745',
                        showConfirmButton: true,
                        timer: 3000,
                        timerProgressBar: true,
                        customClass: {
                            popup: 'animated fadeInDown'
                        }
                    }).then((result) => {
                        window.location.href = '/Order/History';
                    });
                } else {
                    Swal.fire({
                        title: 'Ошибка',
                        text: data.message || 'Произошла ошибка при оформлении заказа',
                        icon: 'error',
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#dc3545'
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                    title: 'Ошибка',
                    text: 'Произошла ошибка при оформлении заказа',
                    icon: 'error',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#dc3545'
                });
            });
        }
    </script>
} 